<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>保留指定位数的小数</title>
    <link href="/2021/09/22/%E4%BF%9D%E7%95%99%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/"/>
    <url>/2021/09/22/%E4%BF%9D%E7%95%99%E6%8C%87%E5%AE%9A%E4%BD%8D%E6%95%B0%E7%9A%84%E5%B0%8F%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解如何在c++,Java,Python中保留指定位数的小数</p><span id="more"></span><h3 id="c-版本"><a href="#c-版本" class="headerlink" title="c++版本"></a>c++版本</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 使用 iomanip 库中的 setprecision 方法</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">double</span> pi = <span class="hljs-number">3.1415926</span>;<br>cout&lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">5</span>) &lt;&lt;pi &lt;&lt;endl;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br><span class="hljs-comment">// setprecision单独使用是控制有效位数的，与fixed合用才是控制小数点后位数的</span><br>&#125; <br></code></pre></td></tr></table></figure><h3 id="Java版本"><a href="#Java版本" class="headerlink" title="Java版本"></a>Java版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.math.RoundingMode;<br><span class="hljs-keyword">import</span> java.text.DecimalFormat;<br><span class="hljs-keyword">import</span> java.text.NumberFormat;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        <span class="hljs-comment">// 方法一</span><br>        <span class="hljs-keyword">double</span> a = <span class="hljs-number">3.1415926</span>;<br>        System.out.println(String.format(<span class="hljs-string">&quot;%.4f&quot;</span>, a));<br><br>        <span class="hljs-comment">// 方法二</span><br>        String format = <span class="hljs-keyword">new</span> DecimalFormat(<span class="hljs-string">&quot;#.0000&quot;</span>).format(a);<br>        System.out.println(format);<br><br>        <span class="hljs-comment">// 方法三</span><br>        NumberFormat nf = NumberFormat.getNumberInstance();<br>        nf.setMaximumFractionDigits(<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">// DOWN 表示不进行四舍五入， UP表示进行四舍五入</span><br>        nf.setRoundingMode(RoundingMode.DOWN);<br>        System.out.println(nf.format(a));<br><br>        <span class="hljs-comment">// 方法四  将小数直接转换成字符串截取相应的位数</span><br>        String s = String.valueOf(a);<br>        <span class="hljs-comment">//保留小数点后4位，非四舍五入</span><br>        String str = s.substring(<span class="hljs-number">0</span>,s.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>) + <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">double</span> d = Double.parseDouble(str);<br>        System.out.println(d);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><ul><li>使用format函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-number">0.123456</span>,<span class="hljs-string">&#x27;.2f&#x27;</span>))<br><span class="hljs-comment"># 该方法会四舍五入</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习——1</title>
    <link href="/2021/09/22/Redis%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%941/"/>
    <url>/2021/09/22/Redis%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%941/</url>
    
    <content type="html"><![CDATA[<p>Redis（Remote Dictionary Server )，即远程字典服务，是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><ul><li>Redis的应用场景</li></ul><table><thead><tr><th align="left">适合</th><th>不适合</th></tr></thead><tbody><tr><td align="left">1、缓存</td><td>数据量太大，数据访问频率非常低的</td></tr><tr><td align="left">2、排行榜</td><td>业务都不适合使用Redis。</td></tr><tr><td align="left">3、计算器，限速器、限流器</td><td></td></tr><tr><td align="left">4、好友关系</td><td>数据太大会增加成本，访问频率太低，</td></tr><tr><td align="left">5、简单消息队列</td><td>保存在内存中纯属浪费资源。</td></tr><tr><td align="left">6、Seesion共享</td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>布隆过滤器</title>
    <link href="/2021/09/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2021/09/21/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解有关布隆过滤器的有关知识。</p><span id="more"></span><p>借鉴于<a href="https://old-panda.com/2021/08/20/bloomfilter-introduction/">布隆过滤器简介</a></p><h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><ul><li><p>布隆过滤器是一种数据存储方式。</p></li><li><p>可以解决的问题</p><p>在大规模的数据中查询是否存在某条数据</p></li><li><p>缺陷</p><ul><li>对于某条数据的返回结果为真时，该数据不一定在Redis中</li><li>对于某条数据的返回结果为假时，该数据一定不在Redis中</li></ul></li></ul><h3 id="布隆过滤器的原理"><a href="#布隆过滤器的原理" class="headerlink" title="布隆过滤器的原理"></a>布隆过滤器的原理</h3><p>布隆过滤器的设计基于我们已经很熟悉的哈希函数，显然，对于同一个元素，不同的哈希函数会得出不同的哈希值，根据这一特性，就可以着手设计布隆过滤器了。首先，在一段长度为 <code>m</code> 的比特数组（ bit array ）中，将所有的比特置为 0 ，然后根据某种规则挑选 <code>k</code> 个哈希函数。当往布隆过滤器里添加一个元素 <code>X</code> 时，通过这 <code>k</code> 个哈希函数计算出 <code>k</code> 个哈希值，这也就对应着比特数组中的 <code>k</code> 个位置，将这 <code>k</code> 个位置的值置为 1 ，到此元素 <code>X</code> 添加完成。而判断一个元素是否存在于集合中也是同样的过程，计算出 <code>k</code> 个哈希值，然后去数组中对应的这 <code>k</code> 个位置检查是否都为 1 ，如果有 0 存在，那么意味着这个元素不可能存在于集合中。</p><h3 id="如何提高布隆过滤器的准确率"><a href="#如何提高布隆过滤器的准确率" class="headerlink" title="如何提高布隆过滤器的准确率"></a>如何提高布隆过滤器的准确率</h3><p>（1）增加二进制数组位数</p><p>（2） 增加哈希次数</p><p>具体可以参考维基百科—-Bloom filter词条</p><h3 id="具体的实现"><a href="#具体的实现" class="headerlink" title="具体的实现"></a>具体的实现</h3><ul><li><a href="https://github.com/OldPanda/bloomfilter-py">Python 实现</a></li><li><a href="https://github.com/OldPanda/bloomfilter">Go 实现</a></li></ul><h3 id="Java中使用布隆过滤器"><a href="#Java中使用布隆过滤器" class="headerlink" title="Java中使用布隆过滤器"></a>Java中使用布隆过滤器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">Config config = <span class="hljs-keyword">new</span> Config();<br>config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis:l/127.0.0.1:6379&quot;</span>);<span class="hljs-comment">//构造Redisson</span><br>RedissonClient redisson = Redisson.create(config);<br>RBloomFilter&lt;String&gt; bloomFilter = redisson.getBloomFilter(<span class="hljs-string">&quot;bloom&quot;</span>);<span class="hljs-comment">//I初始化布隆过滤器:预计元素为1000000L,误判率为1%</span><br>bloomFilter.tryInit(<span class="hljs-number">1000000L</span>,<span class="hljs-number">0.01</span>);<br>bloomFilter.add(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-comment">//增加数据</span><br><span class="hljs-comment">//判断指定编号是否在布隆过滤器中</span><br>System.out.printIn(bloomFilter.contains(<span class="hljs-string">&quot;1&quot;</span>));<br><span class="hljs-comment">//输出true</span><br>System.out.println(bloomFilter.contains(<span class="hljs-string">&quot;8888&quot;</span>));<br><span class="hljs-comment">//输出false</span><br><br></code></pre></td></tr></table></figure><p>假设布隆过滤器中存放着若干商品的信息，那某件商品被<code>删除</code>之后布隆过滤器应该怎么办？</p><p>分析：布隆过滤器因为某一位二进制可能被多个编号Hash引用,因此布隆过滤器无法直接处理删除数据的情况</p><ul><li>解决方案1:定时异步重建布隆过滤器</li><li>解决方案2:计数Bloom Fliter</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linus有关的命令</title>
    <link href="/2021/09/21/linus%E6%9C%89%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/09/21/linus%E6%9C%89%E5%85%B3%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解有关于linux命令的具体使用，不在停留在对于linux基础的讲解</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透,击穿,雪崩</title>
    <link href="/2021/09/21/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/"/>
    <url>/2021/09/21/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你可以了解缓存穿透、缓存击穿、缓存雪崩的相关概念以及应对措施。</p><span id="more"></span><blockquote><p>本文借鉴<a href="https://xie.infoq.cn/article/39495c2d568aca1d6db5c9c50#:~:text=%E4%BB%80%E4%B9%88%E6%98%AF%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%9F.%20%E5%A6%82%E6%9E%9C%E5%9C%A8%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%E6%97%B6%EF%BC%8C%E5%9C%A8%E7%BC%93%E5%AD%98%E5%B1%82%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E9%83%BD%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%AF%B4%EF%BC%8C%E5%9C%A8%E7%BC%93%E5%AD%98%E5%B1%82%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B1%82%E9%83%BD%E6%B2%A1%E6%9C%89%E5%91%BD%E4%B8%AD%E6%95%B0%E6%8D%AE%EF%BC%8C%E9%82%A3%E4%B9%88%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%E5%B0%B1%E5%8F%AB%E4%BD%9C%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%82.%20%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%B8%8B%E5%9B%BE%E6%9D%A5%E8%A1%A8%E7%A4%BA%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E7%8E%B0%E8%B1%A1%E3%80%82.,%E9%80%A0%E6%88%90%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E4%B8%BB%E8%A6%81%E5%8E%9F%E5%9B%A0%E5%B0%B1%E6%98%AF%EF%BC%9A%E6%9F%A5%E8%AF%A2%E6%9F%90%E4%B8%AAKey%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8CRedis%E7%BC%93%E5%AD%98%E4%B8%AD%E6%B2%A1%E6%9C%89%E7%9B%B8%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%88%99%E7%9B%B4%E6%8E%A5%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E8%AF%A2%E3%80%82.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E4%B9%9F%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%A6%81%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%88%99%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%9A%E8%BF%94%E5%9B%9E%E7%A9%BA%EF%BC%8C%E8%80%8CRedis%E4%B9%9F%E4%B8%8D%E4%BC%9A%E7%BC%93%E5%AD%98%E8%BF%99%E4%B8%AA%E7%A9%BA%E7%BB%93%E6%9E%9C%E3%80%82.%20%E8%BF%99%E5%B0%B1%E9%80%A0%E6%88%90%E6%AF%8F%E6%AC%A1%E9%80%9A%E8%BF%87%E8%BF%99%E6%A0%B7%E7%9A%84Key%E5%8E%BB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E9%83%BD%E4%BC%9A%E7%9B%B4%E6%8E%A5%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E8%AF%A2%EF%BC%8CRedis%E4%B8%8D%E4%BC%9A%E7%BC%93%E5%AD%98%E7%A9%BA%E7%BB%93%E6%9E%9C%E3%80%82.%20%E8%BF%99%E5%B0%B1%E9%80%A0%E6%88%90%E4%BA%86%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E7%9A%84%E9%97%AE%E9%A2%98%E3%80%82.">面试官：讲讲什么是缓存穿透？击穿？雪崩？如何解决？</a></p></blockquote><h3 id="什么是缓存穿透？"><a href="#什么是缓存穿透？" class="headerlink" title="什么是缓存穿透？"></a>什么是缓存穿透？</h3><p>缓存：Redis 缓存</p><p>穿透：穿透 Redis 缓存到后端数据库中去找数据</p><p>造成缓存穿透的主要原因：查询某个 Key 对应的数据，Redis 缓存中没有相应的数据，则直接到数据库中查询。数据库中也不存在要查询的数据，则数据库会返回空，而 Redis 也不会缓存这个空结果。这就造成每次通过这样的 Key 去查询数据都会直接到数据库中查询，Redis 不会缓存空结果。这就造成了缓存穿透的问题。</p><h3 id="如何解决缓存穿透问题？"><a href="#如何解决缓存穿透问题？" class="headerlink" title="如何解决缓存穿透问题？"></a>如何解决缓存穿透问题？</h3><p>在上文中我们知道了造成缓存穿透的主要原因（缓存中不存在相应的数据，直接到数据库查询，数据库返回空结果，缓存中不存储空结果）。那我们就可以针对性的提出解决方案。</p><p>第一种解决方案：就是把空对象缓存起来。当第一次从数据库中查询出来的结果为空时，我们就将这个空对象加载到缓存，并设置合理的过期时间，这样，就能够在一定程度上保障后端数据库的安全。</p><p>第二种解决缓存穿透问题的解决方案：就是使用布隆过滤器，布隆过滤器可以针对大数据量的、有规律的键值进行处理。一条记录是不是存在，本质上是一个 Bool 值，只需要使用 1bit 就可以存储。我们可以使用布隆过滤器将这种表示是、否等操作，压缩到一个数据结构中。比如，我们最熟悉的用户性别这种数据，就非常适合使用布隆过滤器来处理。</p><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>如果我们为缓存中的大部分数据设置了相同的过期时间，则到了某一时刻，缓存中的数据就会批量过期。如果缓存中的数据在某个时刻批量过期，导致大部分用户的请求都会直接落在数据库上，这种现象就叫作缓存击穿。</p><h3 id="如何解决缓存击穿问题？"><a href="#如何解决缓存击穿问题？" class="headerlink" title="如何解决缓存击穿问题？"></a>如何解决缓存击穿问题？</h3><p>第一种解决方案：对于比较热点的数据，我们可以在缓存中设置这些数据永不过期；也可以在访问数据的时候，在缓存中更新这些数据的过期时间；如果是批量入库的缓存项，我们可以为这些缓存项分配比较合理的过期时间，避免同一时刻失效。</p><p>第二种解决方案：使用分布式锁，保证对于每个 Key 同时只有一个线程去查询后端的服务，某个线程在查询后端服务的同时，其他线程没有获得分布式锁的权限，需要进行等待。不过在高并发场景下，这种解决方案对于分布式锁的访问压力比较大。</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>如果在某一时刻缓存集中失效，或者缓存系统出现故障，所有的并发流量就会直接到达数据库。数据存储层的调用量就会暴增，用不了多长时间，数据库就会被大流量压垮，这种级联式的服务故障，就叫作缓存雪崩。</p><h3 id="如何解决缓存雪崩问题？"><a href="#如何解决缓存雪崩问题？" class="headerlink" title="如何解决缓存雪崩问题？"></a>如何解决缓存雪崩问题？</h3><p>第一种解决方案（最常用）：就是保证 Redis 的高可用，将 Redis 缓存部署成高可用集群（必要时候做成异地多活），可以有效的防止缓存雪崩问题的发生。</p><p>第二种解决方案：为了缓解大并发流量，我们也可以使用限流降级的方式防止缓存雪崩。例如，在缓存失效后，通过加锁或者使用队列来控制读数据库写缓存的线程数量。具体点就是设置某些 Key 只允许一个线程查询数据和写缓存，其他线程等待。则能够有效的缓解大并发流量对数据库打来的巨大冲击。</p><p>第三种解决方案：通过数据预热的方式将可能大量访问的数据加载到缓存，在即将发生大并发访问的时候，提前手动触发加载不同的数据到缓存中，并为数据设置不同的过期时间，让缓存失效的时间点尽量均匀，不至于在同一时刻全部失效。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript中函数和方法的区别</title>
    <link href="/2021/09/21/javascript%E4%B8%AD%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2021/09/21/javascript%E4%B8%AD%E5%87%BD%E6%95%B0%E5%92%8C%E6%96%B9%E6%B3%95%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解有关于 ”javascript中函数和方法的区别“ 的有关知识。</p><span id="more"></span><p>函数（function）: 函数是带有名称（named）和参数的JavaScript代码段，可以一次定义多次调用。</p><p>方法（method）:  方法也是特殊的函数，但是方法指代的是对象中的函数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js的基本使用</title>
    <link href="/2021/09/21/Javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/09/21/Javascript%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>js小知识</p><span id="more"></span><ul><li>知识点一： ++a 和 a++</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = a++ + ++a;<br><br>输出b等于<span class="hljs-number">4</span><br><br>--a 等同于 a-=<span class="hljs-number">1</span> 区别是这个就是每次 -<span class="hljs-number">1</span> 先赋值后运算。<br>a-- 等同于 a+=-<span class="hljs-number">1</span> 先运算后赋值　<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript异步编程的4种方法</title>
    <link href="/2021/09/20/Javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2021/09/20/Javascript%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%844%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你可以了解有关于JavaScript异步编程的有关知识。</p><span id="more"></span><blockquote><p>借鉴：<a href="https://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html">Javascript异步编程的4种方法</a></p></blockquote><p>你可能知道，Javascript语言的执行环境是”单线程”（single thread）。</p><p>所谓”单线程”，就是指一次只能完成一件任务。如果有多个任务，就必须排队，前面一个任务完成，再执行后面一个任务，以此类推。</p><p>这种模式的好处是实现起来比较简单，执行环境相对单纯；坏处是只要有一个任务耗时很长，后面的任务都必须排队等着，会拖延整个程序的执行。常见的浏览器无响应（假死），往往就是因为某一段Javascript代码长时间运行（比如死循环），导致整个页面卡在这个地方，其他任务无法执行。</p><p>为了解决这个问题，Javascript语言将任务的执行模式分成两种：同步（Synchronous）和异步（Asynchronous）。</p><p>“同步模式”就是上一段的模式，后一个任务等待前一个任务结束，然后再执行，程序的执行顺序与任务的排列顺序是一致的、同步的；”异步模式”则完全不同，每一个任务有一个或多个回调函数（callback），前一个任务结束后，不是执行后一个任务，而是执行回调函数，后一个任务则是不等前一个任务结束就执行，所以程序的执行顺序与任务的排列顺序是不一致的、异步的。</p><p>“异步模式”非常重要。在浏览器端，耗时很长的操作都应该异步执行，避免浏览器失去响应，最好的例子就是Ajax操作。在服务器端，”异步模式”甚至是唯一的模式，因为执行环境是单线程的，如果允许同步执行所有http请求，服务器性能会急剧下降，很快就会失去响应。</p><p>本文总结了”异步模式”编程的4种方法，理解它们可以让你写出结构更合理、性能更出色、维护更方便的Javascript程序。</p><p><strong>一、回调函数</strong></p><p>这是异步编程最基本的方法。</p><p>假定有两个函数f1和f2，后者等待前者的执行结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">f1();<br><br>f2();<br></code></pre></td></tr></table></figure><p>如果f1是一个很耗时的任务，可以考虑改写f1，把f2写成f1的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params">callback</span>)</span>&#123;<br><br>　　　　<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>　　　　　　<span class="hljs-comment">// f1的任务代码</span><br><br>　　　　　　callback();<br><br>　　　　&#125;, <span class="hljs-number">1000</span>);<br><br>　　&#125;<br></code></pre></td></tr></table></figure><p>执行代码就变成下面这样：</p><blockquote><p>　　f1(f2);</p></blockquote><p>采用这种方式，我们把同步操作变成了异步操作，f1不会堵塞程序运行，相当于先执行程序的主要逻辑，将耗时的操作推迟执行。</p><p>回调函数的优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度<a href="https://en.wikipedia.org/wiki/Coupling_(computer_programming)">耦合</a>（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p><p><strong>二、事件监听</strong></p><p>另一种思路是采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>还是以f1和f2为例。首先，为f1绑定一个事件（这里采用的jQuery的<a href="https://api.jquery.com/on/">写法</a>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">f1.on(<span class="hljs-string">&#x27;done&#x27;</span>, f2);<br></code></pre></td></tr></table></figure><p>上面这行代码的意思是，当f1发生done事件，就执行f2。然后，对f1进行改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">　　<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f1</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>　　　　<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><br>　　　　　　<span class="hljs-comment">// f1的任务代码</span><br><br>　　　　　　**f1.trigger(<span class="hljs-string">&#x27;done&#x27;</span>);**<br><br>　　　　&#125;, <span class="hljs-number">1000</span>);<br><br>　　&#125;<br></code></pre></td></tr></table></figure><p>f1.trigger(‘done’)表示，执行完成后，立即触发done事件，从而开始执行f2。</p><p>这种方法的优点是比较容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以<a href="https://en.wikipedia.org/wiki/Decoupling">“去耦合”</a>（Decoupling），有利于实现<a href="https://www.ruanyifeng.com/blog/2012/10/javascript_module.html">模块化</a>。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p><p><strong>三、发布/订阅</strong></p><p>上一节的”事件”，完全可以理解成”信号”。</p><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做<a href="https://en.wikipedia.org/wiki/Publish-subscribe_pattern">“发布/订阅模式”</a>（publish-subscribe pattern），又称<a href="https://en.wikipedia.org/wiki/Observer_pattern">“观察者模式”</a>（observer pattern）。</p><p>这个模式有多种<a href="https://msdn.microsoft.com/en-us/magazine/hh201955.aspx">实现</a>，下面采用的是Ben Alman的<a href="https://gist.github.com/661855">Tiny Pub/Sub</a>，这是jQuery的一个插件。</p><p>首先，f2向”信号中心”jQuery订阅”done”信号。</p><blockquote><p>　　jQuery.subscribe(“done”, f2);</p></blockquote><p>然后，f1进行如下改写：</p><blockquote><p>　　function f1(){</p><p>　　　　setTimeout(function () {</p><p>　　　　　　// f1的任务代码</p><p>　　　　　　<strong>jQuery.publish(“done”);</strong></p><p>　　　　}, 1000);</p><p>　　}</p></blockquote><p>jQuery.publish(“done”)的意思是，f1执行完成后，向”信号中心”jQuery发布”done”信号，从而引发f2的执行。</p><p>此外，f2完成执行后，也可以取消订阅（unsubscribe）。</p><blockquote><p>　　jQuery.unsubscribe(“done”, f2);</p></blockquote><p>这种方法的性质与”事件监听”类似，但是明显优于后者。因为我们可以通过查看”消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。</p><p><strong>四、Promises对象</strong></p><p>Promises对象是CommonJS工作组提出的一种规范，目的是为异步编程提供<a href="http://wiki.commonjs.org/wiki/Promises/A">统一接口</a>。</p><p>简单说，它的思想是，每一个异步任务返回一个Promise对象，该对象有一个then方法，允许指定回调函数。比如，f1的回调函数f2,可以写成：</p><blockquote><p>　　f1().then(f2);</p></blockquote><p>f1要进行如下改写（这里使用的是jQuery的<a href="https://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html">实现</a>）：</p><blockquote><p>　　function f1(){</p><p>　　　　var dfd = $.Deferred();</p><p>　　　　setTimeout(function () {</p><p>　　　　　　// f1的任务代码</p><p>　　　　　　dfd.resolve();</p><p>　　　　}, 500);</p><p>　　　　<strong>return dfd.promise;</strong></p><p>　　}</p></blockquote><p>这样写的优点在于，回调函数变成了链式写法，程序的流程可以看得很清楚，而且有一整套的<a href="https://api.jquery.com/category/deferred-object/">配套方法</a>，可以实现许多强大的功能。</p><p>比如，指定多个回调函数：</p><blockquote><p>　　f1().then(f2).then(f3);</p></blockquote><p>再比如，指定发生错误时的回调函数：</p><blockquote><p>　　f1().then(f2).fail(f3);</p></blockquote><p>而且，它还有一个前面三种方法都没有的好处：如果一个任务已经完成，再添加回调函数，该回调函数会立即执行。所以，你不用担心是否错过了某个事件或信号。这种方法的缺点就是编写和理解，都相对比较难。</p><p><strong>五、参考链接</strong></p><p>　　* <a href="https://sporto.github.com/blog/2012/12/09/callbacks-listeners-promises/">Asynchronous JS: Callbacks, Listeners, Control Flow Libs and Promises</a></p><p>（完）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java输入输出</title>
    <link href="/2021/09/19/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <url>/2021/09/19/Java%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解Java中的两种输入输出方法。（1）Scanner  （2）BufferedReader </p> <span id="more"></span><blockquote><p>Scanner 在数据较多的时候输入输出较慢，所以采用 BufferedReader 方法</p></blockquote><ul><li>Scanner </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner s1 = <span class="hljs-keyword">new</span> Scanner(System.in);     <span class="hljs-comment">// 创建输入对象</span><br>        Scanner s2 = <span class="hljs-keyword">new</span> Scanner(System.in);     <span class="hljs-comment">// 创建输入对象</span><br><br>        String str = s1.next();                  <span class="hljs-comment">// 输入一个字符串，空格或回车换行时就不继续读了</span><br>        String line = s2.nextLine();             <span class="hljs-comment">// 输入一行字符串</span><br><span class="hljs-comment">//        int num1 = s.nextInt();                 // 输入一个整数</span><br><span class="hljs-comment">//        double num2 = s.nextDouble();           // 输入一个小数</span><br>        System.out.println(str + <span class="hljs-string">&quot; &quot;</span> + line);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>BufferedReader </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        BufferedReader in = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(System.in)); <span class="hljs-comment">// 输入</span><br>        String line = in.readLine();<br>        System.out.println(line);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2021/09/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/09/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>本文是转载的文章，通过此小节的学习，你将了解正则表达式的有关知识</p><span id="more"></span><blockquote><p>借鉴：<a href="https://www.957xx.cc/2018/11/22/29-22%E5%88%86%E9%92%9F%E5%AD%A6%E4%BC%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/">29.22分钟学会正则表达式</a></p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换、校验那些符合某个模式(规则)的文本。</p><h2 id="正则可视化工具"><a href="#正则可视化工具" class="headerlink" title="正则可视化工具"></a>正则可视化工具</h2><p><a href="https://jex.im/regulex/#!flags=&re=^(a|b)*?">Regulex</a></p><h3 id="正则表达式组成"><a href="#正则表达式组成" class="headerlink" title="正则表达式组成"></a>正则表达式组成</h3><ul><li>原义字符</li><li>元字符</li></ul><p>原义字符，就是表示原本意思的字符，像上面正则中的hello，就代表匹配hello这个字符串<br>元字符呢，就是表示不是原本意思的字符，如 \b，表示单词边界。</p><p><strong>既然元字符表示的不是本身的字符，那我如果就要匹配它原本的字符呢？比如说我就要匹配+号，*号，那么请使用 \ 来转义字符</strong></p><p>以下是相关的符号说明</p><ul><li>$ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘n’ 或 ‘r’。要匹配 $ 字符本身，请使用 $。</li><li>() 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</li><li>* 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</li><li>+ 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</li><li>. 匹配除换行符 n 之外的任何单字符。要匹配 . ，请使用 . 。</li><li>[] 标记一个中括号表达式的开始。要匹配 [，请使用 [。</li><li>{} 标记限定符表达式的开始。要匹配 {，请使用 {。</li><li>| 指明两项之间的一个选择。要匹配 |，请使用 |。</li><li>? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</li><li>\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’n’ 匹配换行符。序列 ‘&#39; 匹配 “”，而 ‘(‘ 则匹配 “(“。</li><li>^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</li><li>\cX 匹配由x指明的控制字符。例如， cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</li><li>\f 匹配一个换页符。等价于 x0c 和 cL。</li><li>\n 匹配一个换行符。等价于 x0a 和 cJ。</li><li>\r 匹配一个回车符。等价于 x0d 和 cM。</li><li>\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ fnrtv]。注意 Unicode 正则表达式会匹配全角空格符。</li><li>\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</li><li>\t 匹配一个制表符。等价于 x09 和 cI。</li><li>\v 匹配一个垂直制表符。等价于 x0b 和 cK</li></ul><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><p>示例1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\bhello\b/g</span>  <span class="hljs-comment">//字面量 </span><br><span class="hljs-comment">// \b代表单词边界（WordBoundary） 也就是说这个正则匹配的是 hello world这种hello 而不是helloworld</span><br><span class="hljs-comment">//因为helloworld连起来了，没有单词边界</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;\\bhello\\b&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>)<br><span class="hljs-comment">//注意两者的区别</span><br><span class="hljs-comment">//后面这种方法需要转义反斜杠（javascript的原因）,</span><br><span class="hljs-comment">//而且这个g(修饰符,全局匹配)是单独提取出来的</span><br><span class="hljs-comment">//而且正则两边没有/包围的，上面第一种是这样的=&gt; /正则表达式/</span><br></code></pre></td></tr></table></figure><p>示例2</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//作为光荣的社会主义接班人怎么可能用f*ck做例子呢?</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\bis\b/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;this is me&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>)<br><span class="hljs-comment">//&quot;this X me&quot;</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/is/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;this is me&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>)<br><span class="hljs-comment">//&quot;thX X me&quot;</span><br></code></pre></td></tr></table></figure><p>再来看看一个问题，<strong>如果我只要开头部分的A字符而文本中间的A字符却不要，又该如何？</strong></p><p>只需如此，便可对敌</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^A/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;ABA&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>);<br><span class="hljs-comment">//&quot;XBA&quot;</span><br></code></pre></td></tr></table></figure><p>需要以A为结尾的正则，则是如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/A$/g</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;ABA&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>);<br><span class="hljs-comment">//&quot;ABX&quot;</span><br></code></pre></td></tr></table></figure><p><strong>注意，正如开头结尾的位置一样，^和$的位置也是如此，^放在正则表达式前面，$放在表达式后面</strong></p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><strong>如果要你写一个匹配10个数字的正则？你会怎么写</strong><br>诶~你可能已经胸有成竹的写下了</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript"><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><span class="hljs-symbol">\d</span><br></code></pre></td></tr></table></figure><p>吃惊，你会发现，尽管是你单身二十余年的右手，依然感到了一丝乏力！<br><strong>疲惫，有时是在过度劳累之后</strong><br>为了挽救一些人的右臂，正则有了量词<br>实现上面的需求我们只要 \d{10}<br><img src="https://i.loli.net/2018/11/22/5bf683097bd98.png" alt="clipboard.png"></p><p><strong>但是，如果我不知道要匹配具体多少个数字呢？反正就是匹配100个到1000个之间的数字</strong><br>当当当当~</p><p><img src="https://i.loli.net/2018/11/22/5bf6830dcc9ef.png" alt="clipboard.png"></p><p>让我们看看可视化工具的结果，方便理解</p><p><strong>注意，这个{n,m}是包括n次和m次的哦，是闭区间哦</strong></p><p><img src="https://i.loli.net/2018/11/22/5bf6830ece695.png" alt="clipboard.png"></p><h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><p>从上面一则我们知道，如果我们要匹配100到1000个数字的话，是这样写<br>\d{100,1000}<br><strong>如果我给的字符串里有1000个数字，但是我只想匹配前面100个呢？</strong></p><p>如果按照上面这样写，则如下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3,6&#125;/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123456789&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;替换成这个&#x27;</span>);<br><span class="hljs-comment">//&quot;替换成这个789&quot;</span><br></code></pre></td></tr></table></figure><p>我们可以看到，上面这个例子是匹配了6个数字，将6个数字替换了，尽管他的正则匹配的是3到6个数字。</p><p><strong>没错，它是贪婪的！它会尽可能地匹配更多！</strong><br>这就是正则的 贪婪匹配，这是默认的，如果我们不想要那么贪婪，如何变得容易满足一点？<br><strong>只需要在量词后面加上 ? 即可</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;3,6&#125;?/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;123456789&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;替换成这个&#x27;</span>);<br><span class="hljs-comment">//&quot;替换成这个456789&quot;</span><br></code></pre></td></tr></table></figure><p>可以清楚看到正则只匹配了前面3个数字~这就是正则的非贪婪模式</p><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><p>如果我只需要匹配100个或者1000个数字呢？<br>就只有100和1000两种可能，而不是100到1000任意一个数字，又该如何对敌？<br>这就要设计到正则的分支条件了</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">\d</span><span class="hljs-template-variable">&#123;100&#125;</span><span class="xml">|\d</span><span class="hljs-template-variable">&#123;1000&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2018/11/22/5bf683b8ec145.png" alt="clipboard.png"></p><p>需要注意的是这个 | 分割的是左右两边所有部分，而不是仅仅连着这个符号的左右两部分，看下图</p><p><img src="https://i.loli.net/2018/11/22/5bf683ba2887a.png" alt="clipboard.png"></p><p>有时候我们只需要一部分是分支，后面走的是同一条主干，只需要把分支用()包含即可</p><p><img src="https://i.loli.net/2018/11/22/5bf683bb24e22.png" alt="clipboard.png"></p><p><strong>注意：这个匹配是从正则左边的分支条件开始的，如果左边满足了，那么右边就不会在对比！</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;4&#125;|\d&#123;2&#125;/</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;12345&quot;</span><br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>);<br><span class="hljs-comment">// &quot;X5&quot;</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;2&#125;|\d&#123;4&#125;/</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;12345&quot;</span><br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>);<br><span class="hljs-comment">//&quot;X345&quot;</span><br></code></pre></td></tr></table></figure><h2 id="前瞻-后顾"><a href="#前瞻-后顾" class="headerlink" title="前瞻/后顾"></a>前瞻/后顾</h2><p>sometimes，我们要找寻的字符可能还要依靠前后字符来确定<br><strong>比如说我要替换连续的2个数字，而且它的前面要连着是2个英文字母，这样的数字我才要</strong><br>你可能会疑惑,这样写不就完事了吗？</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">\d</span><span class="hljs-template-variable">&#123;2&#125;</span><span class="xml">\w</span><span class="hljs-template-variable">&#123;2&#125;</span><br></code></pre></td></tr></table></figure><p><strong>上面匹配的是2个数字和2个字母，虽然是连着的，但是匹配了是4个字符，如果我要替换匹配文本的话，那就替换了4个字符，而我们只想替换2个数字！</strong><br>这个时候就需要用到断言了<br>首先我们需要明白几个点</p><ul><li>正则表达式从文本头部到尾部开始解析，文本尾部方向叫做‘前’，也就是往前走，就是往尾巴走</li><li><strong>前瞻</strong>就是正则表达式匹配到规则（此例中的‘2个数字’）的时候，向前看看，看看是否符合断言（此例中的‘前面连着2个字母’），后瞻/后顾的规则则相反。（javascript不支持后顾）</li></ul><p>上表格！</p><p><img src="https://i.loli.net/2018/11/22/5bf683bb4acfb.png" alt="clipboard.png"></p><p>根据表格内容，我们就可以解决这个问题了，注意\w包括数字哦~题目要求是连着2个字母</p><p><img src="https://i.loli.net/2018/11/22/5bf68485c0021.png" alt="clipboard.png"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\d&#123;2&#125;(?=[a-zA-Z]&#123;2&#125;)/</span>;<br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a23bc456def&quot;</span>;<br>str.replace(reg,<span class="hljs-string">&#x27;X&#x27;</span>);<br><span class="hljs-comment">//&quot;1aXbc456def&quot;</span><br></code></pre></td></tr></table></figure><p><strong>只替换了数字，没有替换后面的断言哦！</strong></p><p>顺便把这个负向前瞻看看吧</p><p><img src="https://i.loli.net/2018/11/22/5bf683bc30240.png" alt="clipboard.png"></p><p>看到这个<strong>not</strong> followed by 我想你应该知晓用法了</p><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><strong>当我们要匹配一个出现三次的单词而不是数字的时候，会怎么写呢？</strong><br>你可能会这样写</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hello</span>&#123;<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure><p>然后你打开可视化工具</p><p><img src="https://i.loli.net/2018/11/22/5bf683bc2e857.png" alt="clipboard.png"></p><p>妈耶，居然只重复了我的o字母！死渣则，好过分</p><p><strong>其实，我们只要使用（）就可以达到分组的目的，使量词作用于分组，上面分支条件中的括号亦是如此</strong></p><p><img src="https://i.loli.net/2018/11/22/5bf683bd1f493.png" alt="clipboard.png"></p><p>分组以后怎么使用分组内容呢？<br>首先看一个问题，<strong>如何匹配8个不连续的数字？</strong><br>如果你不使用分组，你会发现根本无从下手，因为你不能判断出有无重复！<br>我们先公布答案，再来分析一波</p><p><img src="https://i.loli.net/2018/11/22/5bf683c04a93a.png" alt="clipboard.png"></p><ul><li>首先，这个(?!负向前瞻断言A)表达式B，这里使用的是负向前瞻，也就是说断言A前面的内容（表达式B），不能符合表达式A，这个说法很拗口，我嘴巴都拗不过来了。能听明白吧，这个设计就是，我这个断言是“出现重复的数字”，然后表达式是“8个数字”，<strong>”8个数字“不能复合“出现重复的数字”</strong></li><li>然后，这个 .<em>(\d).</em> 呢，是先找到一个在任意位置出现的数字，为什么是任意位置呢？因为我们判断的重复可能出现在任何位置；看上面的可视化也就可以明白，<strong>\d前后有0-n个字符,所以说他是任意位置的</strong>。</li><li>最关键的来了，这个\1代表什么呢？仔细看你可以发现，\d加了一个括号，这个括号就代表着<strong>分组</strong>，那么是几号分组呢？第一个括号就是分组1（默认情况下），如果还有第二个括号，那就是分组2，<strong>前瞻的括号是不算的噢</strong>，而这个\1呢就代表着引用这个分组1，使用\2引用分组2。你也许会好奇，我引用它是相当于在这个位置写了一个\d吗？NOP，不仅仅这么简单，<strong>它引用的是这个\d的内容，也就是说他会和\d是一样的值！这不就是重复了吗？！！！</strong>这个 .<em>(\d).<em>\1 就代表着**任意位置出现了任意次数的重复</em></em></li><li>最后，我们把这些整合在一起就是，<strong>匹配8个数字不能出现任意的重复</strong>。(?!出现任意重复)8个数字，因为这个(?!)是负向前瞻，所以。。。emmm。。这样就理解了吧。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ADBlock插件实现原理</title>
    <link href="/2021/09/19/ADBlock%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/09/19/ADBlock%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你可以知道ADBlock插件拦截广告的基本原理。</p><span id="more"></span><blockquote><p><a href="https://adblockplus.org/zh_CN/about">Adblock</a> Plus 是一个可让您自定义您的网络体验的免费扩展程序。您可以屏蔽烦人的广告、防止跟踪等等。它适用于所有主要的桌面浏览器和移动设备。</p></blockquote><p>文章推荐阅读：<a href="https://www.jianshu.com/p/f2e1dc62cc82">ADBlock的实现原理</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内网穿透</title>
    <link href="/2021/09/18/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <url>/2021/09/18/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<p>通过此小节的学习，你将了解有关内网穿透的有关知识。</p><span id="more"></span><p>内网穿透：对于内网来说，其不是不能主动访问公网端口，而是不能反过来有效的被公网访问。内网穿透的主要思路就是利用这一点，让在内网的节点主动访问一个拥有公网IP地址的服务器，并由中间服务器搭桥，打通经过该服务器从其他主机到NAT之后节点的隧道。</p>]]></content>
    
    
    
    <tags>
      
      <tag>小知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
